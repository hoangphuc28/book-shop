<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head.ejs'); %>
    <style>
      .paginate_button {
        background: transparent;
        padding: 5px 15px !important;
      }

      .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: rgba(249, 250, 251) !important;
        color: #374151 !important;
      }

      .paginate_button.current {
        background: transparent !important;
      }
    </style>
  </head>

  <body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <% const truncate = (paragraph, maxLength) => { return paragraph.length >
    maxLength ? paragraph.substring(0, maxLength) + '...' : paragraph; }; %>
    <div class="flex">
      <%- include('../partials/sidebar'); %>

      <div class="flex-grow bg-gray-100 p-6 ml-64">
        <div class="flex justify-between items-center mb-6">
          <h1 class="text-2xl font-semibold text-gray-900">Reviews</h1>
        </div>
        <div class="bg-white shadow rounded-lg p-4">
          <%- include('./toolbar.ejs', { data: data , rating: rating, filter:
          filter}); %> <%- include('./tab.ejs', {filter: filter}); %>

          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Email
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Rating
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Content
                </th>

                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Status
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Create at
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                ></th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% data.items.forEach(item=> { %>
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= item.accounts.email %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <div class="flex">
                    <p class="mr-2"><%= item.rating %></p>
                    <svg
                      class="w-4 h-4 text-yellow-300 me-1"
                      aria-hidden="true"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="currentColor"
                      viewBox="0 0 22 20"
                    >
                      <path
                        d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z"
                      />
                    </svg>
                  </div>
                </td>
                <td class="px-6 py-4 text-sm text-gray-500 w-40 break-words">
                  <%= item.content %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <span
                    class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full <%= item.isActive ? 'bg-green-500 text-white' : 'bg-red-400 text-white' %>"
                  >
                    <%= item.isActive ? 'ACTIVE' : 'INACTIVE' %>
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= new Intl.DateTimeFormat('en-GB', { year: 'numeric' ,
                  month: 'long' , day: '2-digit' , }).format(new
                  Date(item.createdAt)); %>
                </td>
                <td>
                  <button
                    type="button"
                    class="editBtn border-solid border border-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white p-1 rounded-md"
                    data-id="<%= item.id %>"
                    data-status="<%= item.isActive %>"
                  >
                    <%= item.isActive ? 'Hide' : 'Show' %>
                  </button>
                </td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <script>
      document.querySelectorAll('.editBtn').forEach((button) => {
        button.addEventListener('click', function (event) {
          event.preventDefault(); // Prevent any default action
          // Get the current status and ID from the data attributes
          const button = event.target;
          const accountId = button.getAttribute('data-id');
          const currentStatus = button.getAttribute('data-status');
          // Determine the new status and label
          const newStatus = currentStatus === 'true' ? 'false' : 'true';
          // Make the API call to update the account status
          const status = newStatus === 'true' ? 'show' : 'hide';
          const confirmationMessage = `Are you sure you want to ${status} this review?`;
          if (confirm(confirmationMessage)) {
            fetch('/reviews/edit', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id: accountId, isActive: newStatus }),
            })
              .then((data) => {
                // Update the button state and label
                alert('Review updated successfully');
                const currentUrl = window.location.href;
                const currentParams = new URL(currentUrl).search;
                window.location.href = `/reviews${currentParams}`;
              })
              .catch((error) => {
                alert('Something error');
                console.error('Error:', error);
              });
          }
        });
      });
    </script>
  </body>
</html>
