# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  categoryID: String!
  books: [Book!]!
  name: String!
}

type OrderItem {
  orderItemID: String!
  bookId: String!
  extendPrice: Float
  orderID: String!
  quantity: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Promotion {
  id: String!
  code: String!
  startDate: DateTime!
  endDate: DateTime!
  orders: [Order!]!
  level: PromotionLevel!
  validationRule: ValidationRule!
}

"""The levels at which a promotion can be applied"""
enum PromotionLevel {
  Level_Order
  Level_Product
}

union ValidationRule = OrderLevelValidationRule | ProductLevelValidationRule

type OrderLevelValidationRule {
  limit: Float!
  percentage: Float!
}

type ProductLevelValidationRule {
  productIdList: [String!]!
  discountValuePerProduct: Float!
}

type Order {
  orderID: String!
  fullName: String!
  address: String!
  phone: String!
  email: String!
  total: Float!
  status: OrderStatus!
  paymentMethod: PaymentMethod!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderItems: [OrderItem!]!
  promotion: Promotion!
}

"""The status of order"""
enum OrderStatus {
  Order_Placed
  Order_Confirmed
  In_Transit
  Dilivered
  Cancelled
}

"""The payment method of order"""
enum PaymentMethod {
  Cod
  Paypal
}

type CartItem {
  id: String!
  book: Book!
  cart: Cart!
  quantity: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Cart {
  id: String!
  account: Account!
  accountId: String!
  cartItem: [CartItem!]!
  amount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Account {
  id: ID!
  fullName: String!
  address: String!
  phone: String!
  email: String!
  avatar: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Review {
  id: String!
  book: Book!
  accounts: Account!
  rating: Float!
  content: String!
}

type Author {
  id: String!
  books: [Book!]!
  name: String!
}

type Book {
  id: String!
  category: Category!
  author: Author!
  title: String
  thumbnail: String
  description: String
  price: Float
  salePrice: Float
  publishDate: DateTime!
  rating: Float
  reviews: [Review!]!
}

type GetAccountInformationDto {
  fullName: String!
  address: String!
  phone: String!
  email: String!
  avatar: String!
}

type BooksPagination {
  items: [Book!]!
  totalPage: Float!
  totalItem: Float!
  currentPage: Float!
  itemsPerPage: Float!
}

type BookDetailReviews {
  items: [Review!]!
  totalPages: Float!
  totalItem: Float!
  currentPage: Float!
  itemsPerPage: Float!
}

type BookDetail {
  book: Book!
  reviews: BookDetailReviews!
}

type CreateOrderReponse {
  order: Order!
  link: String
}

type Query {
  getBooks(limit: Float!, page: Float!, condition: BookSearchCondition): BooksPagination!
  getBook(id: String!, limit: Float! = 5, page: Float! = 1): BookDetail!
  getBookOnSale: [Book!]!
  getBooksWithCondition(condition: Float!, limit: Float!): [Book!]!
  getAboutPage: String!
  orders: [Order!]!
  ordersByAccount(accountId: String!): [Order!]!
  getCart: Cart!
  information: GetAccountInformationDto!
  getCategories: [Category!]!
  getAuthors: [Author!]!
  getPromotions: [Promotion!]!
}

input BookSearchCondition {
  query: String = ""
  rating: String
  sort: String
  category: [String!]
  author: [String!]
}

type Mutation {
  createReview(productId: String!, rating: Float!, content: String!): Review!
  createOrder(order: CreateOrderInput!): CreateOrderReponse!
  captureOrder(token: String!): String!
  updateCart(bookId: String!, quantity: Float!, isReplace: Boolean!): Cart!
  clearCart: Cart!
  saveAccount(fullName: String, phone: String!, address: String!): Account!
}

input CreateOrderInput {
  fullName: String
  address: String
  phone: String
  email: String
  paymentMethod: PaymentMethod!
  accountId: String
  orderItems: [OrderItemInput!]!
  promotionId: String
  applicationContext: ApplicationContext
}

input OrderItemInput {
  orderItemID: String
  bookId: String
  orderId: String
  quantity: Float
}

input ApplicationContext {
  return_url: String
  cancel_url: String
}